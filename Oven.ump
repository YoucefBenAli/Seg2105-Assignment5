/*
    This program is a simulation of an oven using state machines
    Copyright (C) 2020 Youcef Ben Ali

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/
  class Oven {
    //-- INSTANCE VARIABLES
    boolean radiatingPower = false; //If true power is high, else power is low. Low by default
    boolean ovenOn = false;
    boolean paused = false;
    boolean closedDoor = true;
    boolean beeping = false;
    int microwavePower = 1; //Microwave power from a scale of 1-10
    int secondsLeft = 0;
    int temperature = 0; //Current temperature inside oven
    int targetTemperature = 0; //Temperature requested by user
    int maxTemp = 400; //Max temperature for safety
    int numOperations=0;
    Object[][] operations = new Object[20][];
    depend java.text.SimpleDateFormat;  
    depend java.util.Date;  
    
    //--STATE MACHINESs

    queued fan{

      idleFan{
        turnOffFan -> fanOff;
        turnOnFan -> fanOn;
      }

      fanOff{
          entry / {display("Fan has been turned off");}
          turnOnFan -> fanOn;
      }

      fanOn{
          entry / {display("Fan has been turned on");}
          turnOffFan -> fanOff;
      }
    }
    
    queued radiatingHeatElement {
      idleRad{
        turnOffRadiator->radOff;
        turnOnRadiator[secondsLeft>0 && ovenOn == false]->radOn;
        turnOnRadiator[secondsLeft==0]/{display("Time is set to zero, ensure time is above 0");}->idleRad;
        turnOnRadiator[ovenOn==true]/{display("The oven is currently being used, please cancel other cooking operations");}->idleRad;
      }
      radOn{
        turnOffRadiator -> radOff;
          entry /{
            if(radiatingPower) display("Radiator is on at high power");
            else display("Radiator is on at low power");}

          entry/{turnOnFan();startTimer(secondsLeft);}
          do{toggleOven();}
          timerEnded/{nextOperation();} -> radOff;
          stop/{secondsLeft=0;} ->radOff;
          pause -> radPaused;
      }

      radPaused{
        entry/{display("Radiator is paused");turnOffFan();}
        resume[closedDoor] -> radOn;
        resume[!closedDoor]/{display("Ensure the door is closed before resuming");}->radPaused;
        turnOffRadiator -> radOff;
      }
      radOff{
        entry/{display("Radiator has been turned off");}
        entry/{turnOffFan(); beep(3); ovenOn=false; clearQueue(); secondsLeft=0;}
        turnOnRadiator -> radOn;
        after(1) -> idleRad;
      }
    }

    queued microwave{
      idleMic{
        turnOnMicrowave[secondsLeft>0 && ovenOn == false] -> micOn;
        turnOnMicrowave[secondsLeft==0]/{display("Time is set to zero, ensure time is above 0");} -> idleMic;
        turnOnMicrowave[ovenOn==true]/{display("The oven is currently being used, please cancel other cooking operations");} -> idleMic;
        turnOffMicrowave -> micOff;
      }
      micOn{
        entry/{display("Microwave is on at " + microwavePower); startTimer(secondsLeft); openExhaust();}
        do{toggleOven();}
        pause -> micPaused;
        stop/{secondsLeft=0;} ->micOff;
        timerEnded/{nextOperation();}-> micOff;
        turnOffMicrowave -> micOff;
      }
      micPaused{
        entry/{display("Microwave is paused");}
        resume[closedDoor] -> micOn;
        resume[!closedDoor]/{display("Ensure the door is closed before resuming");}->micPaused;
        turnOffMicrowave -> micOff;
      }
      micOff{
        entry/{display("Microwave has been turned off"); closeExhaust(); beep(3); ovenOn = false; clearQueue(); secondsLeft=0;}
        after(1) -> idleMic;
      }
    }

    queued defroster{
      idleFrost{
        turnOnDefroster[secondsLeft>0 && ovenOn == false] -> frostOn;
        turnOnDefroster[secondsLeft==0]/{display("Time is set to zero, ensure time is above 0");} -> idleFrost;
        turnOnDefroster[ovenOn==true]/{display("The oven is currently being used, please cancel other cooking operations");} -> idleFrost;
        turnOffDefroster -> frostOff;
      }
      frostOn{
        entry/{display("Defroster is now on"); startTimer(secondsLeft);}
        do{toggleOven();}
        pause -> frostPaused;
        stop/{secondsLeft=0;} ->frostOff;
        timerEnded/{nextOperation();}-> frostOff;
        turnOffDefroster -> frostOff;
      }
      frostPaused{
        entry/{display("Defroster is paused");}
        resume[closedDoor] -> frostOn;
        resume[!closedDoor]/{display("Ensure the door is closed before resuming");}->frostPaused;
        turnOffDefroster -> frostOff;
      }
      frostOff{
        entry/{display("Defroster has been turned off");beep(3); ovenOn = false; clearQueue(); secondsLeft=0;}
        after(1) -> idleFrost;
      }
    }

    queued temperatureControl{
      idleTemp{
        tempOn (int heat) [heat<maxTemp] / {targetTemperature = heat;}-> temperatureActive;
        tempOn (int heat) [heat>=maxTemp] / {display("Given temperature above maximum temperature");} ->idleTemp;
      }
      temperatureActive{
        
        tempOn (int heat) [heat<maxTemp] / {targetTemperature = heat;}-> temperatureActive;
        tempOn (int heat) [heat>=maxTemp] / {display("Given temperature above maximum temperature");} ->idleTemp;
        do{checkForTemp();}
      }
    }

    queued door{
      idleDoor{
        openDoor-> doorOpen;
        closedDoor-> doorClosed;
      }
      doorClosed{
        entry/{closedDoor = true; display("Door has been closed");}
        openDoor -> doorOpen;
      }
      doorOpen{
        entry/{closedDoor = false; display("Door has been opened"); pause();}
        closeDoor -> doorClosed;
      }
    }

    queued exhaust{
      closedExhaust{
        entry/{display("Exhaust vent is closed");}
        openExhaust -> openExhaust;
      }
      openExhaust{
        entry/{display("Exhaust vent has been opened");}
        closeExhaust -> closedExhaust;
        pause-> closedExhaust;
      }
    }

    queued timer2{
      idleTimer{
        timeOn(int seconds) [ovenOn == false] / {secondsLeft = seconds;} -> activeTimer;
        timeOn(int seconds) [ovenOn == true] / {display("Timer currently being used for oven features");} -> idleTimer;
        timeOff -> inactiveTimer;
      }
      activeTimer{
        entry/{startTimer(secondsLeft);}
        stop/{secondsLeft=0;} ->inactiveTimer;
        timerEnded->inactiveTimer;
      }
      inactiveTimer{
        entry/{beep(4);} -> idleTimer;
      }
    }

    queued timingSm {
      idle {
        startTimer(int seconds) -> countingDown;
      }
      countingDown {
        startTimer(int seconds) -> countingDown;
        
        after(1.0) [secondsLeft >= 1 && ! paused]  / {
          displayTime();
          secondsLeft--;
        } -> countingDown;
        
        after(1.0) [secondsLeft <= 0] -> idle;
        
        pause -> idle;
        
        exit / {if (secondsLeft <= 0) timerEnded();}
      }
    }

    //--INSTANCE METHODS

    void checkForTemp(){ //Monitors temperature to stop opreations if temperature exceeds target/critical temperature
      while(true){
        //System.out.println("Here");
        if (temperature >= maxTemp || temperature>=targetTemperature){
          display("Max temperature exceeded, stopping all cooking");
          stop();
          break;
        }
      }
    }

    void changeTemp(int heat){ //For testing purposes not a function that would be controlled by user
      temperature=heat;
      if (temperature >= maxTemp || temperature>=targetTemperature){
          display("Max temperature exceeded, stopping all cooking");
          stop();
      }
    }

    void toggleOven(){
      try{
          Thread.sleep(100);
          ovenOn = true;
        }
        catch(InterruptedException ex){
          Thread.currentThread().interrupt();
        }
    }

    void beep(int repition){ //Method to simulate beeping sounds
      if(!beeping){
        beeping = false;
        for (int i = 0; i<repition; i++){
          display("SOUND: BEEP (1 second)");
          try{
            Thread.sleep(1000);
          }
          catch(InterruptedException ex){
            Thread.currentThread().interrupt();
          }
        }
        beeping = true;
      }
    }

    void setTime(int seconds){
      secondsLeft = seconds;
    }

    void setMicroWavePower(int power){
      microwavePower = power;
    }

    void toggleradiatingPower(){ //Switches between high and low power for radiator
      radiatingPower = !radiatingPower;
      if (radiatingPower){
        display("Power has been set to high");
      }
      else{
        display("Power has been set to low");
      }
    }

    void clearQueue(){
      for(int i = 0; i<operations.length; i++){
        operations[i] = null;
      }
      numOperations=0;
      display("Queue/Operation has been completed or stopped");
    }

    void shift(){//Deletes first element and shifts all elements in the operations array to the left by one thereby progressing through the queue
      operations[0] = null;
      for (int i = 1; i<operations.length;i++){
        operations[i-1] = operations[i];
      }
      numOperations--;
    }

    void nextOperation(){ //Reads the first element of the queue and executes the operation
      if (numOperations>0){
        Object[] operation = operations[0];
        //System.out.println("Current operation" + operation[0]);
        String command = operation[0].toString();
        int time=0;
        if (operation[1]!= null && operation[1] instanceof Integer){
          time = (Integer) operation[1];
        }
        switch(command){
          case "microwave":
            setTime(time);
            turnOnMicrowave();
            break;
          case "radiator":
            setTime(time);
            turnOnRadiator();
            break;
          case "defrost":
            setTime(time);
            turnOnDefroster();
            break;
        }
        shift();
      }
      else{
        clearQueue();
        beep(5);
      }
    }

    void queue(String order, int time){ //Adds new operations to the queue when called
      if (numOperations<20){
        Object[] operation = new Object[]{order,time};
        operations[numOperations] = operation;
        numOperations++;
      }
      else{
        display("Exceeding max operations");
      }

      for(int i = 0; i<numOperations;i++){
        System.out.println(operations[i][0]);
        System.out.println(operations[i][1]);
      }
    }

    //--Display functions

    void displayTime() {
      SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss ");  
      Date date = new Date();  
      formatter.format(date);
      System.out.println(formatter.format(date) + "DISPLAY: "+secondsLeft);
    } 
    
    void display(String s) {
      SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss ");  
      Date date = new Date();  
      formatter.format(date);
      System.out.println(formatter.format(date)+ s);
    }

    void displayCommands(){
      String s = "Available commands:\nmicrowaveOn\nmicrowaveOff\nradiatorOn\nradiatorOff\ndefrosterOn\ndefrosterOff\ntime\npowerMicrowave\npowerRadiator\nopendoor\nclosedoor\nresume\nstop\ntimer\ntemperature\ninternaltemp(for testing only)\nboth(microwave and radiator)\nqueue\ncommands";
      display(s);
    }

    void displaySecondaryCommands(){
      String s = "Queue commands:\nmicrowave\nradiator\ndefrost\ndone\ncancel\ncommands";
      display(s);
    }

    //-- MAIN FUNCTION

    public static void main(String[] args){


        System.out.println("Oven.ump  Copyright (C) 2020  Youcef Ben Ali\n
        This program comes with ABSOLUTELY NO WARRANTY;.\n
        This is free software, and you are welcome to redistribute it\n
        under certain conditions;");


        Oven test = new Oven();
        Scanner s = new Scanner(System.in);
        int length;
        String command;
        test.displayCommands();
        while(true) {
        command = s.nextLine();
        switch(command) {
          case "q": System.exit(0);
          case "queue":
            test.display("Note: Max number of operations is 20");
            if (test.ovenOn == false){
                test.displaySecondaryCommands();
                list: while(true){
                  command = s.nextLine();
                  switch(command){
                    case "microwave":
                      test.display("Enter time");
                      command = s.nextLine();
                      length = Integer.parseInt(command);
                      test.queue("microwave", length);
                      break;
                    case "radiator":
                      test.display("Enter time");
                      command = s.nextLine();
                      length = Integer.parseInt(command);
                      test.queue("radiator", length);
                      break;
                    case "defrost":
                      test.display("Enter time");
                      command = s.nextLine();
                      length = Integer.parseInt(command);
                      test.queue("defrost", length);
                      break;
                    case "done":
                      test.nextOperation();
                      break list;
                    case "cancel":
                      test.clearQueue();
                      break;
                    case "commands":
                      test.displaySecondaryCommands();
                      break;
                    }
                }
              }
            else{
              test.display("Oven in use, please stop oven operations before creating a queue");
            }
            
            break;
          case "microwaveOn":
            test.turnOnMicrowave();
            break;
          case "microwaveOff":
            test.turnOffMicrowave();
            break;
          case "radiatorOn":
            test.turnOnRadiator();
            break;
          case "radiatorOff":
            test.turnOffRadiator();
            break;
          case "defrosterOn":
            test.turnOnDefroster();
            break;
          case "defrosterOff":
            test.turnOffDefroster();
            break;
          case "time":
            test.display("Enter time");
            command = s.nextLine();
            length = Integer.parseInt(command);
            test.setTime(length);
            break;
          case "powerMicrowave":
            test.display("Enter power (1-10):");
            command = s.nextLine();
            length = Integer.parseInt(command);
            test.setMicroWavePower(length);
            break;
          case "powerRadiator":
            test.toggleradiatingPower();
            break;
          case "opendoor":
            test.openDoor();
            break;
          case "closedoor":
            test.closeDoor();
            break;
          case "pause":
            test.pause();
            break;
          case "resume":
            test.resume();
            break;
          case "stop":
            test.stop();
            break;
          case "timer":
            test.display("Enter time:");
            command = s.nextLine();
            length = Integer.parseInt(command);
            test.timeOn(length);
            break;
          case "temperature":
            test.display("Enter temperature:");
            command = s.nextLine();
            length = Integer.parseInt(command);
            test.tempOn(length);
            break;
          case "internalTemp":
            test.display("Enter temperature:");
            command = s.nextLine();
            length = Integer.parseInt(command);
            test.changeTemp(length);
            break;
          case "both":
            test.turnOnRadiator();
            test.turnOnMicrowave();
            break;
          case "commands":
            test.displayCommands();
            break;
          default:
            test.display("Not a valid command/button");
        }
      }
    }
  }